parameters:
  serviceName: ''
  databaseName: ''
  location: ''
  loggingLevel: ''
  tmpFolder: 'C:\Users\VssAdministrator\AppData\Local\Temp'
  sqlArtifactFolder: '$(Pipeline.Workspace)/package_build/sqlMigrations'

steps:

- ${{ if eq(parameters.loggingLevel, 'Debug') }}:
  - task: CmdLine@2
    displayName: "[Debug] Output artifact structure"
    inputs:
      script: 'ls -R ${{parameters.sqlArtifactFolder}}'

# Run initial SQL script
- task: AzureKeyVault@2
  displayName: Get Credentials for Db script
  inputs:
    azureSubscription: '${{parameters.serviceName}}'
    KeyVaultName: '${{parameters.keyVaultName}}'    
    SecretsFilter: 'CarsApiSQLAdminUsername,CarsApiSQLAdminPassword'
    RunAsPreJob: false

#- ${{ if eq(parameters.loggingLevel, 'Debug') }}:
#  - task: CmdLine@2
#    displayName: "[Debug] Output tmp folder"
#    inputs:
#      script: |
#        ls -R ${{parameters.tmpFolder}}
#        cat ${{parameters.tmpFolder}}/T*.tmp

  
#- task: SqlAzureDacpacDeployment@1
#  inputs:
#    azureSubscription: 'git-carsapi-service-connection'
#    AuthenticationType: 'server'
#    ServerName: '$(AppOutputs.sqlServerName.value)'
#    DatabaseName: '${{parameters.databaseName}}'
#    SqlUsername: '$(CarsApiSQLAdminUsername)'
#    SqlPassword: '$(CarsApiSQLAdminPassword)'
#    deployType: 'SqlTask'
#    SqlFile: '${{parameters.sqlArtifactFolder}}/initial.sql'
#    IpDetectionMethod: 'AutoDetect'
#
#- task: SqlAzureDacpacDeployment@1
#  displayName: Run initial Sql sheet
#  inputs:
#    connectedServiceName: '${{parameters.serviceName}}'
#    TaskType: 'sqlQuery'
#    SqlFile: '${{parameters.sqlArtifactFolder}}/initial.sql'
#    ExecuteInTransaction: true
#    ServerName: '$(AppOutputs.sqlServerName.value)'
#    DatabaseName: '${{parameters.databaseName}}'
#    AuthScheme: 'sqlServerAuthentication'
#    SqlUsername: '$(CarsApiSQLAdminUsername)'
#    SqlPassword: '$(CarsApiSQLAdminPassword)'

#- task: SqlAzureDacpacDeployment@1
#  inputs:
#    azureSubscription: 'git-carsapi-service-connection'
#    AuthenticationType: 'server'
#    ServerName: '$(AppOutputs.sqlServerName.value)'
#    DatabaseName: '${{parameters.databaseName}}'
#    SqlUsername: '$(CarsApiSQLAdminUsername)'
#    SqlPassword: '$(CarsApiSQLAdminPassword)'
#    deployType: 'InlineSqlTask'
#    SqlInline: |
#      IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
#      BEGIN
#          CREATE TABLE [__EFMigrationsHistory] (
#              [MigrationId] nvarchar(150) NOT NULL,
#              [ProductVersion] nvarchar(32) NOT NULL,
#              CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
#          );
#      END;
#      GO
#      
#      BEGIN TRANSACTION;
#      GO
#      
#      CREATE TABLE [Cars] (
#          [Id] int NOT NULL IDENTITY,
#          [BrandName] nvarchar(max) NULL,
#          [ManufactureYear] nvarchar(max) NULL,
#          [Model] nvarchar(max) NULL,
#          CONSTRAINT [PK_Cars] PRIMARY KEY ([Id])
#      );
#      GO
#      
#      INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
#      VALUES (N'20220514144150_CreateInitial', N'7.0.0-preview.6.22329.4');
#      GO
#      
#      COMMIT;
#      GO
#    IpDetectionMethod: 'AutoDetect'